{"version":3,"sources":["components/ImageBox.js","components/TextBox.js","components/Testimonial.js","components/App.js","serviceWorker.js","index.js"],"names":["ImageContainer","styled","div","Buttons","ImageBox","data","handlePrevClick","handleNextClick","className","src","imgPath","alt","name","title","id","onClick","TextContainer","Testimony","p","TestimonyAuthor","Name","span","Job","TextBox","testimonial","job","TestimonialContainer","Testimonial","db","useState","testimonyNumber","setTestimonyNumber","console","log","event","length","App","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+nEAGA,IAAMA,EAAiBC,IAAOC,IAAV,KAmBdC,EAAUF,IAAOC,IAAV,KA4CE,SAASE,EAAT,GAA+D,IAA3CC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,gBAAiBC,EAAmB,EAAnBA,gBACxD,OACE,kBAACP,EAAD,KACE,yBACEQ,UAAU,cACVC,IAAKJ,EAAKK,QACVC,IAAKN,EAAKO,KACVC,MAAOR,EAAKO,OAEd,kBAACT,EAAD,KACE,yBAAKW,GAAG,cAAcC,QAAST,GAC7B,yBAAKG,IAAI,yBAAyBE,IAAI,GAAGE,MAAM,MAEjD,yBAAKC,GAAG,cAAcC,QAASR,GAC7B,yBAAKE,IAAI,yBAAyBE,IAAI,GAAGE,MAAM,Q,43CC7EzD,IAAMG,EAAgBf,IAAOC,IAAV,KAkBbe,EAAYhB,IAAOiB,EAAV,KAeTC,EAAkBlB,IAAOC,IAAV,KAafkB,EAAOnB,IAAOoB,KAAV,KAKJC,EAAMrB,IAAOoB,KAAV,KASM,SAASE,EAAT,GAA4B,IAATlB,EAAQ,EAARA,KAChC,OACE,kBAACW,EAAD,KACE,kBAACC,EAAD,KAAYZ,EAAKmB,aACjB,kBAACL,EAAD,KACE,kBAACC,EAAD,KAAOf,EAAKO,MACZ,kBAACU,EAAD,KAAMjB,EAAKoB,O,ikBC/DnB,IAAMC,EAAuBzB,IAAOC,IAAV,KAyBX,SAASyB,IACtB,IAAMtB,EAAOuB,EAAGvB,KADoB,EAEUwB,mBAAS,GAFnB,mBAE7BC,EAF6B,KAEZC,EAFY,KAgBpC,OADAC,QAAQC,IAAIH,GAEV,kBAACJ,EAAD,CAAsBlB,UAAU,yBAC9B,kBAACJ,EAAD,CACEC,KAAMA,EAAKyB,GACXxB,gBAhBkB,SAAC4B,GACnBJ,EAAkB,GACpBC,EAAmBD,EAAkB,IAenCvB,gBAZkB,SAAC2B,GACnBJ,EAAkBzB,EAAK8B,OAAS,GAClCJ,EAAmBD,EAAkB,MAYrC,kBAACP,EAAD,CAASlB,KAAMA,EAAKyB,MC3CXM,MARf,WACE,OACE,0BAAM5B,UAAU,OACd,kBAACmB,EAAD,QCMcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mMCZN,IAAMC,EAAcC,YAAH,KASjBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACJ,EAAD,MACA,kBAAC,EAAD,OAEFK,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.5b771aa7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ImageContainer = styled.div`\r\n  display: flex;\r\n  padding: 10%;\r\n  background-image: url(\"./images/pattern-bg.svg\");\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  position: relative;\r\n\r\n  img {\r\n    box-shadow: -3px 41px 70px -52px rgba(81, 67, 190, 1);\r\n    border-radius: 5px;\r\n    width: 100%;\r\n  }\r\n\r\n  @media screen and (min-width: 900px) {\r\n    padding: 5%;   \r\n  }\r\n`;\r\n\r\nconst Buttons = styled.div`\r\n  left: -19em;\r\n  bottom: 0px;\r\n  position: absolute;\r\n  width: 100px;\r\n  height: 40px;\r\n  margin: auto;\r\n  left: 50%;\r\n  transform: translate(-50%, -25px);\r\n  display: flex;\r\n  flex-direction: row;\r\n\r\n  div {\r\n    background-color: white;\r\n    height: 50px;\r\n    width: 50px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor: pointer;\r\n\r\n    img {\r\n      width: initial;\r\n      transition: all 0.2s ease;\r\n    }\r\n\r\n    img:hover {\r\n      transform: scale(1.5);\r\n    }\r\n  }\r\n\r\n  #button_prev {\r\n    border-radius: 50% 0% 0% 50%;\r\n    /* width: 25px; */\r\n  }\r\n  #button_next {\r\n    border-radius: 0% 50% 50% 0%;\r\n    /* width: 25px; */\r\n  }\r\n  @media screen and (min-width: 900px) {\r\n    transform: translate(-200px, -55px);\r\n  }\r\n`;\r\n\r\nexport default function ImageBox({ data, handlePrevClick, handleNextClick }) {\r\n  return (\r\n    <ImageContainer>\r\n      <img\r\n        className='css3-shadow'\r\n        src={data.imgPath}\r\n        alt={data.name}\r\n        title={data.name}\r\n      />\r\n      <Buttons>\r\n        <div id='button_prev' onClick={handlePrevClick}>\r\n          <img src='./images/icon-prev.svg' alt='' title='' />\r\n        </div>\r\n        <div id='button_next' onClick={handleNextClick}>\r\n          <img src='./images/icon-next.svg' alt='' title='' />\r\n        </div>\r\n      </Buttons>\r\n    </ImageContainer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TextContainer = styled.div`\r\n  font-size: 0.55em;\r\n  text-align: center;\r\n  background-image: url(\"./images/pattern-quotes.svg\");\r\n  background-repeat: no-repeat;\r\n  background-position-x: center;\r\n  padding: 25px 15px 80px 15px;\r\n  margin: 30px 0 0 0;\r\n  background-size: 20%;\r\n\r\n  @media screen and (min-width: 900px) {\r\n    font-size: 1.1em;\r\n    text-align: left;\r\n    padding: 1.4em 0 0 2em;\r\n    padding: 40px 25px 100px 25px;\r\n    background-position-x: 120px;\r\n  }\r\n`;\r\nconst Testimony = styled.p`\r\n  font-weight: 300;\r\n\r\n  ::before {\r\n    content: \"“ \";\r\n  }\r\n  ::after {\r\n    content: \" ”\";\r\n  }\r\n  @media screen and (min-width: 900px) {\r\n    width: 135.5%;\r\n    z-index: 2;\r\n  }\r\n`;\r\n\r\nconst TestimonyAuthor = styled.div`\r\n  display: flex;\r\n  flex-flow: column;\r\n\r\n  @media screen and (min-width: 900px) {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: left;\r\n    align-items: baseline;\r\n    font-size: 0.6em;\r\n  }\r\n`;\r\n\r\nconst Name = styled.span`\r\n  font-weight: 700;\r\n  margin-top: 10px;\r\n  color: hsl(240, 38%, 20%);\r\n`;\r\nconst Job = styled.span`\r\n  font-weight: 300;\r\n  color: hsl(240, 18%, 77%);\r\n\r\n  @media screen and (min-width: 900px) {\r\n    margin-left: 10px;\r\n  }\r\n`;\r\n\r\nexport default function TextBox({ data }) {\r\n  return (\r\n    <TextContainer>\r\n      <Testimony>{data.testimonial}</Testimony>\r\n      <TestimonyAuthor>\r\n        <Name>{data.name}</Name>\r\n        <Job>{data.job}</Job>\r\n      </TestimonyAuthor>\r\n    </TextContainer>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ImageBox from \"./ImageBox\";\r\nimport TextBox from \"./TextBox\";\r\nimport db from \"../utils/db.json\";\r\n\r\nconst TestimonialContainer = styled.div`\r\n  max-width: 375px;\r\n  margin: auto;\r\n  background-image: url(\"./images/pattern-curve.svg\");\r\n  background-repeat: no-repeat;\r\n  background-position-x: left;\r\n  background-position-y: bottom;\r\n  background-size: 300px;\r\n\r\n  @media screen and (min-width: 900px) {\r\n    width: 100%;\r\n    max-width: 1220px;\r\n    display: flex;\r\n    flex-direction: row-reverse;\r\n    align-items: center;\r\n    padding: 1em;\r\n    background-size: 500px;\r\n\r\n    div {\r\n      flex: 1;\r\n      z-index: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Testimonial() {\r\n  const data = db.data;\r\n  const [testimonyNumber, setTestimonyNumber] = useState(0);\r\n\r\n  const handlePrevClick = (event) => {\r\n    if (testimonyNumber > 0) {\r\n      setTestimonyNumber(testimonyNumber - 1);\r\n    }\r\n  };\r\n  const handleNextClick = (event) => {\r\n    if (testimonyNumber < data.length - 1) {\r\n      setTestimonyNumber(testimonyNumber + 1);\r\n    }\r\n  };\r\n\r\n  console.log(testimonyNumber);\r\n  return (\r\n    <TestimonialContainer className='testimonial-container'>\r\n      <ImageBox\r\n        data={data[testimonyNumber]}\r\n        handlePrevClick={handlePrevClick}\r\n        handleNextClick={handleNextClick}\r\n      />\r\n      <TextBox data={data[testimonyNumber]} />\r\n    </TestimonialContainer>\r\n  );\r\n}\r\n","import React from \"react\";\nimport Testimonial from \"./Testimonial\";\n\nfunction App() {\n  return (\n    <main className='App'>\n      <Testimonial />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n  body{\n    margin: 0px;\n    font-family: 'Inter', sans-serif;\n    font-size:32px;\n    box-sizing: content-box;\n    }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}